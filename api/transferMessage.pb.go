// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: transferMessage.proto

package OilMachine

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// 交易记录类型
type TxType int32

const (
	TxType_CardNormal          TxType = 0 //卡正常
	TxType_CardOutInTrans      TxType = 1 //逃卡
	TxType_CardDebitError      TxType = 2 //错卡
	TxType_CardGreyDebit       TxType = 3 //补扣
	TxType_CardGreyUnlock      TxType = 4 //补充
	TxType_CardEmployeeOnDuty  TxType = 5 //员工上班
	TxType_CardEmployeeOffDuty TxType = 6 //员工下班
	TxType_NoCard              TxType = 7 //非卡交易
	TxType_PriceReceived       TxType = 8 //油价接收
	TxType_CardRefused         TxType = 9 //卡错拒绝
)

// Enum value maps for TxType.
var (
	TxType_name = map[int32]string{
		0: "CardNormal",
		1: "CardOutInTrans",
		2: "CardDebitError",
		3: "CardGreyDebit",
		4: "CardGreyUnlock",
		5: "CardEmployeeOnDuty",
		6: "CardEmployeeOffDuty",
		7: "NoCard",
		8: "PriceReceived",
		9: "CardRefused",
	}
	TxType_value = map[string]int32{
		"CardNormal":          0,
		"CardOutInTrans":      1,
		"CardDebitError":      2,
		"CardGreyDebit":       3,
		"CardGreyUnlock":      4,
		"CardEmployeeOnDuty":  5,
		"CardEmployeeOffDuty": 6,
		"NoCard":              7,
		"PriceReceived":       8,
		"CardRefused":         9,
	}
)

func (x TxType) Enum() *TxType {
	p := new(TxType)
	*p = x
	return p
}

func (x TxType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxType) Descriptor() protoreflect.EnumDescriptor {
	return file_transferMessage_proto_enumTypes[0].Descriptor()
}

func (TxType) Type() protoreflect.EnumType {
	return &file_transferMessage_proto_enumTypes[0]
}

func (x TxType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxType.Descriptor instead.
func (TxType) EnumDescriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{0}
}

type TankRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreID uint64 `protobuf:"varint,1,opt,name=StoreID,proto3" json:"StoreID,omitempty"` //门店编号
	TankID  uint32 `protobuf:"varint,2,opt,name=TankID,proto3" json:"TankID,omitempty"`   //油罐编号
}

func (x *TankRequestParams) Reset() {
	*x = TankRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TankRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TankRequestParams) ProtoMessage() {}

func (x *TankRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TankRequestParams.ProtoReflect.Descriptor instead.
func (*TankRequestParams) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{0}
}

func (x *TankRequestParams) GetStoreID() uint64 {
	if x != nil {
		return x.StoreID
	}
	return 0
}

func (x *TankRequestParams) GetTankID() uint32 {
	if x != nil {
		return x.TankID
	}
	return 0
}

type NozzleRequestParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoreID  uint64 `protobuf:"varint,1,opt,name=StoreID,proto3" json:"StoreID,omitempty"`   //门店编号
	NozzleID uint32 `protobuf:"varint,2,opt,name=NozzleID,proto3" json:"NozzleID,omitempty"` //油枪编号
}

func (x *NozzleRequestParams) Reset() {
	*x = NozzleRequestParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NozzleRequestParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NozzleRequestParams) ProtoMessage() {}

func (x *NozzleRequestParams) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NozzleRequestParams.ProtoReflect.Descriptor instead.
func (*NozzleRequestParams) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{1}
}

func (x *NozzleRequestParams) GetStoreID() uint64 {
	if x != nil {
		return x.StoreID
	}
	return 0
}

func (x *NozzleRequestParams) GetNozzleID() uint32 {
	if x != nil {
		return x.NozzleID
	}
	return 0
}

// 油机交易记录
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId                 string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                                                       //box序列号
	MdcTxCounter          uint32 `protobuf:"varint,2,opt,name=mdc_tx_counter,json=mdcTxCounter,proto3" json:"mdc_tx_counter,omitempty"`                               //box交易编号
	CommTerminalId        uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"`                         //通讯终端编号
	CommTerminalTxCounter uint32 `protobuf:"varint,4,opt,name=comm_terminal_tx_counter,json=commTerminalTxCounter,proto3" json:"comm_terminal_tx_counter,omitempty"`  //通讯终端交易编号
	SideInTerminal        int32  `protobuf:"varint,5,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"`                         //通讯终端内面号
	ItemInSide            int32  `protobuf:"varint,6,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`                                     //通讯终端面内顺序号
	TxType                TxType `protobuf:"varint,7,opt,name=tx_type,json=txType,proto3,enum=OilMachine.TxType" json:"tx_type,omitempty"`                            //交易记录类型类型
	Datetime              uint64 `protobuf:"varint,8,opt,name=datetime,proto3" json:"datetime,omitempty"`                                                             //时间戳,EPOCH秒数
	Asn                   string `protobuf:"bytes,9,opt,name=asn,proto3" json:"asn,omitempty"`                                                                        //卡应用号
	Balance               uint32 `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`                                                              //余额
	Amount                uint32 `protobuf:"varint,11,opt,name=amount,proto3" json:"amount,omitempty"`                                                                //数额
	CardTxCounter         uint32 `protobuf:"varint,12,opt,name=card_tx_counter,json=cardTxCounter,proto3" json:"card_tx_counter,omitempty"`                           //卡交易号
	Tac                   uint32 `protobuf:"varint,13,opt,name=tac,proto3" json:"tac,omitempty"`                                                                      //电子签名
	Gmac                  uint32 `protobuf:"varint,14,opt,name=gmac,proto3" json:"gmac,omitempty"`                                                                    //解灰认证码
	PsamTac               uint32 `protobuf:"varint,15,opt,name=psam_tac,json=psamTac,proto3" json:"psam_tac,omitempty"`                                               //灰锁签名
	PsamAsn               string `protobuf:"bytes,16,opt,name=psam_asn,json=psamAsn,proto3" json:"psam_asn,omitempty"`                                                //PSAM应用号
	PsamTerminalId        string `protobuf:"bytes,17,opt,name=psam_terminal_id,json=psamTerminalId,proto3" json:"psam_terminal_id,omitempty"`                         //PSAM编号
	PsamTerminalTxCounter uint32 `protobuf:"varint,18,opt,name=psam_terminal_tx_counter,json=psamTerminalTxCounter,proto3" json:"psam_terminal_tx_counter,omitempty"` //PSAM终端交易计数器
	DebitSource           uint32 `protobuf:"varint,19,opt,name=debit_source,json=debitSource,proto3" json:"debit_source,omitempty"`                                   //扣款来源
	Unit                  uint32 `protobuf:"varint,20,opt,name=unit,proto3" json:"unit,omitempty"`                                                                    //结算单位+方式
	CardType              uint32 `protobuf:"varint,21,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                                            //卡类型
	CardKeyVerItem        uint32 `protobuf:"varint,22,opt,name=card_key_ver_item,json=cardKeyVerItem,proto3" json:"card_key_ver_item,omitempty"`                      //卡密钥索引+版本
	NozzleCode            uint32 `protobuf:"varint,23,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`                                      //枪号
	GradeCode             string `protobuf:"bytes,24,opt,name=grade_code,json=gradeCode,proto3" json:"grade_code,omitempty"`                                          //油品代码
	Volume                uint32 `protobuf:"varint,25,opt,name=volume,proto3" json:"volume,omitempty"`                                                                //升数，单位0.01
	Price                 uint32 `protobuf:"varint,26,opt,name=price,proto3" json:"price,omitempty"`                                                                  //成交价格.非卡小数点后两位.其余按unit规定
	EmployeeId            uint32 `protobuf:"varint,27,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`                                      //员工号
	VolumeTotal           uint32 `protobuf:"varint,28,opt,name=volume_total,json=volumeTotal,proto3" json:"volume_total,omitempty"`                                   //累计升数,单位0.01
	TerminalMac           uint32 `protobuf:"varint,29,opt,name=terminal_mac,json=terminalMac,proto3" json:"terminal_mac,omitempty"`                                   //终端数据认证码
	RecvTime              uint64 `protobuf:"varint,30,opt,name=recv_time,json=recvTime,proto3" json:"recv_time,omitempty"`                                            //box接收时间
	GetMode               uint32 `protobuf:"varint,31,opt,name=get_mode,json=getMode,proto3" json:"get_mode,omitempty"`                                               //获取方式
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *Transaction) GetMdcTxCounter() uint32 {
	if x != nil {
		return x.MdcTxCounter
	}
	return 0
}

func (x *Transaction) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *Transaction) GetCommTerminalTxCounter() uint32 {
	if x != nil {
		return x.CommTerminalTxCounter
	}
	return 0
}

func (x *Transaction) GetSideInTerminal() int32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *Transaction) GetItemInSide() int32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *Transaction) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_CardNormal
}

func (x *Transaction) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *Transaction) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *Transaction) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Transaction) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Transaction) GetCardTxCounter() uint32 {
	if x != nil {
		return x.CardTxCounter
	}
	return 0
}

func (x *Transaction) GetTac() uint32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *Transaction) GetGmac() uint32 {
	if x != nil {
		return x.Gmac
	}
	return 0
}

func (x *Transaction) GetPsamTac() uint32 {
	if x != nil {
		return x.PsamTac
	}
	return 0
}

func (x *Transaction) GetPsamAsn() string {
	if x != nil {
		return x.PsamAsn
	}
	return ""
}

func (x *Transaction) GetPsamTerminalId() string {
	if x != nil {
		return x.PsamTerminalId
	}
	return ""
}

func (x *Transaction) GetPsamTerminalTxCounter() uint32 {
	if x != nil {
		return x.PsamTerminalTxCounter
	}
	return 0
}

func (x *Transaction) GetDebitSource() uint32 {
	if x != nil {
		return x.DebitSource
	}
	return 0
}

func (x *Transaction) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *Transaction) GetCardType() uint32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *Transaction) GetCardKeyVerItem() uint32 {
	if x != nil {
		return x.CardKeyVerItem
	}
	return 0
}

func (x *Transaction) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

func (x *Transaction) GetGradeCode() string {
	if x != nil {
		return x.GradeCode
	}
	return ""
}

func (x *Transaction) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Transaction) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Transaction) GetEmployeeId() uint32 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *Transaction) GetVolumeTotal() uint32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *Transaction) GetTerminalMac() uint32 {
	if x != nil {
		return x.TerminalMac
	}
	return 0
}

func (x *Transaction) GetRecvTime() uint64 {
	if x != nil {
		return x.RecvTime
	}
	return 0
}

func (x *Transaction) GetGetMode() uint32 {
	if x != nil {
		return x.GetMode
	}
	return 0
}

// 油罐状态
type TankStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	CommTerminalId uint32 `protobuf:"varint,2,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	TankId         uint32 `protobuf:"varint,3,opt,name=tank_id,json=tankId,proto3" json:"tank_id,omitempty"`                           //油罐ID
	ProbeId        uint32 `protobuf:"varint,4,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`                        //探棒ID
	Datetime       uint64 `protobuf:"varint,5,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //时间戳,EPOCH秒数
	Volume         uint32 `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`                                         //油体积,单位0.01
	TcVolume       uint32 `protobuf:"varint,7,opt,name=tc_volume,json=tcVolume,proto3" json:"tc_volume,omitempty"`                     //净油体积,单位0.01
	Ullage         uint32 `protobuf:"varint,8,opt,name=ullage,proto3" json:"ullage,omitempty"`                                         //空容升数,单位0.01
	Height         uint32 `protobuf:"varint,9,opt,name=height,proto3" json:"height,omitempty"`                                         //油面高,mm
	WaterHeight    uint32 `protobuf:"varint,10,opt,name=water_height,json=waterHeight,proto3" json:"water_height,omitempty"`           //水面高,mm
	Temperature    uint32 `protobuf:"varint,11,opt,name=temperature,proto3" json:"temperature,omitempty"`                              //温度
	RecordCounter  uint64 `protobuf:"varint,12,opt,name=record_counter,json=recordCounter,proto3" json:"record_counter,omitempty"`     //计数器
}

func (x *TankStatus) Reset() {
	*x = TankStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TankStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TankStatus) ProtoMessage() {}

func (x *TankStatus) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TankStatus.ProtoReflect.Descriptor instead.
func (*TankStatus) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{3}
}

func (x *TankStatus) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *TankStatus) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *TankStatus) GetTankId() uint32 {
	if x != nil {
		return x.TankId
	}
	return 0
}

func (x *TankStatus) GetProbeId() uint32 {
	if x != nil {
		return x.ProbeId
	}
	return 0
}

func (x *TankStatus) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *TankStatus) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TankStatus) GetTcVolume() uint32 {
	if x != nil {
		return x.TcVolume
	}
	return 0
}

func (x *TankStatus) GetUllage() uint32 {
	if x != nil {
		return x.Ullage
	}
	return 0
}

func (x *TankStatus) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TankStatus) GetWaterHeight() uint32 {
	if x != nil {
		return x.WaterHeight
	}
	return 0
}

func (x *TankStatus) GetTemperature() uint32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TankStatus) GetRecordCounter() uint64 {
	if x != nil {
		return x.RecordCounter
	}
	return 0
}

// 加油开始事件
type RefuelStartedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //事件时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
}

func (x *RefuelStartedEvent) Reset() {
	*x = RefuelStartedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefuelStartedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefuelStartedEvent) ProtoMessage() {}

func (x *RefuelStartedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefuelStartedEvent.ProtoReflect.Descriptor instead.
func (*RefuelStartedEvent) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{4}
}

func (x *RefuelStartedEvent) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *RefuelStartedEvent) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *RefuelStartedEvent) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *RefuelStartedEvent) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *RefuelStartedEvent) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *RefuelStartedEvent) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

// 加油结束事件
type RefuelFinishedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //事件时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
	Volume         uint32 `protobuf:"varint,7,opt,name=volume,proto3" json:"volume,omitempty"`                                         //油量
	VolumeTotal    uint32 `protobuf:"varint,8,opt,name=volume_total,json=volumeTotal,proto3" json:"volume_total,omitempty"`            //油量累计
}

func (x *RefuelFinishedEvent) Reset() {
	*x = RefuelFinishedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefuelFinishedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefuelFinishedEvent) ProtoMessage() {}

func (x *RefuelFinishedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefuelFinishedEvent.ProtoReflect.Descriptor instead.
func (*RefuelFinishedEvent) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{5}
}

func (x *RefuelFinishedEvent) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *RefuelFinishedEvent) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *RefuelFinishedEvent) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *RefuelFinishedEvent) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *RefuelFinishedEvent) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *RefuelFinishedEvent) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

func (x *RefuelFinishedEvent) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *RefuelFinishedEvent) GetVolumeTotal() uint32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

// 油卡插入事件
type CardInsertedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //事件时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
	Asn            string `protobuf:"bytes,7,opt,name=asn,proto3" json:"asn,omitempty"`                                                //卡应用号
	Balance        uint32 `protobuf:"varint,8,opt,name=balance,proto3" json:"balance,omitempty"`                                       //卡余额
}

func (x *CardInsertedEvent) Reset() {
	*x = CardInsertedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardInsertedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardInsertedEvent) ProtoMessage() {}

func (x *CardInsertedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardInsertedEvent.ProtoReflect.Descriptor instead.
func (*CardInsertedEvent) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{6}
}

func (x *CardInsertedEvent) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *CardInsertedEvent) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *CardInsertedEvent) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *CardInsertedEvent) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *CardInsertedEvent) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *CardInsertedEvent) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

func (x *CardInsertedEvent) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *CardInsertedEvent) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// 油枪离线事件
type NozzleOfflineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //事件时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
}

func (x *NozzleOfflineEvent) Reset() {
	*x = NozzleOfflineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NozzleOfflineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NozzleOfflineEvent) ProtoMessage() {}

func (x *NozzleOfflineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NozzleOfflineEvent.ProtoReflect.Descriptor instead.
func (*NozzleOfflineEvent) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{7}
}

func (x *NozzleOfflineEvent) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *NozzleOfflineEvent) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *NozzleOfflineEvent) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *NozzleOfflineEvent) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *NozzleOfflineEvent) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *NozzleOfflineEvent) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

// 油枪上线线事件
type NozzleOnlineEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //事件时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
}

func (x *NozzleOnlineEvent) Reset() {
	*x = NozzleOnlineEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NozzleOnlineEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NozzleOnlineEvent) ProtoMessage() {}

func (x *NozzleOnlineEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NozzleOnlineEvent.ProtoReflect.Descriptor instead.
func (*NozzleOnlineEvent) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{8}
}

func (x *NozzleOnlineEvent) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *NozzleOnlineEvent) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *NozzleOnlineEvent) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *NozzleOnlineEvent) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *NozzleOnlineEvent) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *NozzleOnlineEvent) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

// 加油卡弹出事件
type CardPopEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //事件时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
}

func (x *CardPopEvent) Reset() {
	*x = CardPopEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardPopEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardPopEvent) ProtoMessage() {}

func (x *CardPopEvent) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardPopEvent.ProtoReflect.Descriptor instead.
func (*CardPopEvent) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{9}
}

func (x *CardPopEvent) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *CardPopEvent) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *CardPopEvent) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *CardPopEvent) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *CardPopEvent) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *CardPopEvent) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

//油枪配置更新通知
type NozzleConfigUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId       string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                    //box序列号
	DataVersion uint64 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` //数据版本号
}

func (x *NozzleConfigUpdated) Reset() {
	*x = NozzleConfigUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NozzleConfigUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NozzleConfigUpdated) ProtoMessage() {}

func (x *NozzleConfigUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NozzleConfigUpdated.ProtoReflect.Descriptor instead.
func (*NozzleConfigUpdated) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{10}
}

func (x *NozzleConfigUpdated) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *NozzleConfigUpdated) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

//油价更新通知
type NozzlePriceConfigUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId       string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                    //box序列号
	DataVersion uint64 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` //数据版本号
}

func (x *NozzlePriceConfigUpdated) Reset() {
	*x = NozzlePriceConfigUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NozzlePriceConfigUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NozzlePriceConfigUpdated) ProtoMessage() {}

func (x *NozzlePriceConfigUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NozzlePriceConfigUpdated.ProtoReflect.Descriptor instead.
func (*NozzlePriceConfigUpdated) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{11}
}

func (x *NozzlePriceConfigUpdated) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *NozzlePriceConfigUpdated) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

//液位仪配置更新通知
type AtgConfigUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId       string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                    //box序列号
	DataVersion uint64 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` //数据版本号
}

func (x *AtgConfigUpdated) Reset() {
	*x = AtgConfigUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtgConfigUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtgConfigUpdated) ProtoMessage() {}

func (x *AtgConfigUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtgConfigUpdated.ProtoReflect.Descriptor instead.
func (*AtgConfigUpdated) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{12}
}

func (x *AtgConfigUpdated) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *AtgConfigUpdated) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

//获取液位仪配置请求
type GetAtgConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId       string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                    //box序列号
	DataVersion uint64 `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"` //数据版本号
}

func (x *GetAtgConfigReq) Reset() {
	*x = GetAtgConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAtgConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtgConfigReq) ProtoMessage() {}

func (x *GetAtgConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtgConfigReq.ProtoReflect.Descriptor instead.
func (*GetAtgConfigReq) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{13}
}

func (x *GetAtgConfigReq) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetAtgConfigReq) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

//探棒条目
type Probe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProbeId         uint32 `protobuf:"varint,1,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`                           //探棒序号
	ProbeAddressLen uint32 `protobuf:"varint,2,opt,name=probe_address_len,json=probeAddressLen,proto3" json:"probe_address_len,omitempty"` //探棒地址长度
	ProbeAddress    []byte `protobuf:"bytes,3,opt,name=probe_address,json=probeAddress,proto3" json:"probe_address,omitempty"`             //探棒地址
	TankCode        uint32 `protobuf:"varint,4,opt,name=tank_code,json=tankCode,proto3" json:"tank_code,omitempty"`                        //连接罐号
}

func (x *Probe) Reset() {
	*x = Probe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Probe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Probe) ProtoMessage() {}

func (x *Probe) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Probe.ProtoReflect.Descriptor instead.
func (*Probe) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{14}
}

func (x *Probe) GetProbeId() uint32 {
	if x != nil {
		return x.ProbeId
	}
	return 0
}

func (x *Probe) GetProbeAddressLen() uint32 {
	if x != nil {
		return x.ProbeAddressLen
	}
	return 0
}

func (x *Probe) GetProbeAddress() []byte {
	if x != nil {
		return x.ProbeAddress
	}
	return nil
}

func (x *Probe) GetTankCode() uint32 {
	if x != nil {
		return x.TankCode
	}
	return 0
}

//液位仪终端条目
type AtgTerminal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommTerminalId   uint32   `protobuf:"varint,1,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"`      //通讯终端编号
	CommTerminalType []byte   `protobuf:"bytes,2,opt,name=comm_terminal_type,json=commTerminalType,proto3" json:"comm_terminal_type,omitempty"` //通讯终端类型
	AccessMode       uint32   `protobuf:"varint,3,opt,name=access_mode,json=accessMode,proto3" json:"access_mode,omitempty"`                    //接入模式
	AccessParam      []byte   `protobuf:"bytes,4,opt,name=access_param,json=accessParam,proto3" json:"access_param,omitempty"`                  //接入参数
	ProbeCount       uint32   `protobuf:"varint,5,opt,name=probe_count,json=probeCount,proto3" json:"probe_count,omitempty"`                    //探棒个数
	ProbeItems       []*Probe `protobuf:"bytes,6,rep,name=probe_items,json=probeItems,proto3" json:"probe_items,omitempty"`                     //探棒列表
}

func (x *AtgTerminal) Reset() {
	*x = AtgTerminal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AtgTerminal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AtgTerminal) ProtoMessage() {}

func (x *AtgTerminal) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AtgTerminal.ProtoReflect.Descriptor instead.
func (*AtgTerminal) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{15}
}

func (x *AtgTerminal) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *AtgTerminal) GetCommTerminalType() []byte {
	if x != nil {
		return x.CommTerminalType
	}
	return nil
}

func (x *AtgTerminal) GetAccessMode() uint32 {
	if x != nil {
		return x.AccessMode
	}
	return 0
}

func (x *AtgTerminal) GetAccessParam() []byte {
	if x != nil {
		return x.AccessParam
	}
	return nil
}

func (x *AtgTerminal) GetProbeCount() uint32 {
	if x != nil {
		return x.ProbeCount
	}
	return 0
}

func (x *AtgTerminal) GetProbeItems() []*Probe {
	if x != nil {
		return x.ProbeItems
	}
	return nil
}

//获取液位仪配置响应
type GetAtgConfigResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId            string         `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                                     //box序列号
	DataVersion      uint64         `protobuf:"varint,2,opt,name=data_version,json=dataVersion,proto3" json:"data_version,omitempty"`                  //数据版本号
	AtgTerminalCount uint32         `protobuf:"varint,3,opt,name=atg_terminal_count,json=atgTerminalCount,proto3" json:"atg_terminal_count,omitempty"` //液位仪终端个数
	AtgTerminalItems []*AtgTerminal `protobuf:"bytes,4,rep,name=atg_terminal_items,json=atgTerminalItems,proto3" json:"atg_terminal_items,omitempty"`  //液位仪终端列表
}

func (x *GetAtgConfigResp) Reset() {
	*x = GetAtgConfigResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAtgConfigResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAtgConfigResp) ProtoMessage() {}

func (x *GetAtgConfigResp) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAtgConfigResp.ProtoReflect.Descriptor instead.
func (*GetAtgConfigResp) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{16}
}

func (x *GetAtgConfigResp) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetAtgConfigResp) GetDataVersion() uint64 {
	if x != nil {
		return x.DataVersion
	}
	return 0
}

func (x *GetAtgConfigResp) GetAtgTerminalCount() uint32 {
	if x != nil {
		return x.AtgTerminalCount
	}
	return 0
}

func (x *GetAtgConfigResp) GetAtgTerminalItems() []*AtgTerminal {
	if x != nil {
		return x.AtgTerminalItems
	}
	return nil
}

//获取油站版本号相关信息
type GetStationConfigVersionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"` //box序列号
}

func (x *GetStationConfigVersionReq) Reset() {
	*x = GetStationConfigVersionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStationConfigVersionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStationConfigVersionReq) ProtoMessage() {}

func (x *GetStationConfigVersionReq) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStationConfigVersionReq.ProtoReflect.Descriptor instead.
func (*GetStationConfigVersionReq) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{17}
}

func (x *GetStationConfigVersionReq) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

//油站版本号相关信息
type GetStationConfigVersionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId               string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                                              //box序列号
	WhitelistVersion    uint64 `protobuf:"varint,2,opt,name=whitelist_version,json=whitelistVersion,proto3" json:"whitelist_version,omitempty"`            //白名单列表版本号
	BlacklistVersion    uint64 `protobuf:"varint,3,opt,name=blacklist_version,json=blacklistVersion,proto3" json:"blacklist_version,omitempty"`            //黑名单列表版本号
	AddBlacklistVersion uint64 `protobuf:"varint,4,opt,name=add_blacklist_version,json=addBlacklistVersion,proto3" json:"add_blacklist_version,omitempty"` //新增黑名单列表版本号
	DelBlacklistVersion uint64 `protobuf:"varint,5,opt,name=del_blacklist_version,json=delBlacklistVersion,proto3" json:"del_blacklist_version,omitempty"` //新删黑名单列表版本号
	AtgCfgTabVersion    uint64 `protobuf:"varint,6,opt,name=atg_cfg_tab_version,json=atgCfgTabVersion,proto3" json:"atg_cfg_tab_version,omitempty"`        //液位仪版本
	PpuCfgTabVersion    uint64 `protobuf:"varint,7,opt,name=ppu_cfg_tab_version,json=ppuCfgTabVersion,proto3" json:"ppu_cfg_tab_version,omitempty"`        //油品油价版本
	StaNozTabVersion    uint64 `protobuf:"varint,8,opt,name=sta_noz_tab_version,json=staNozTabVersion,proto3" json:"sta_noz_tab_version,omitempty"`        //油站通用信息版本
	Noz_En_CFGVersion   uint64 `protobuf:"varint,9,opt,name=noz_En_CFG_version,json=nozEnCFGVersion,proto3" json:"noz_En_CFG_version,omitempty"`           //保留信息
}

func (x *GetStationConfigVersionResp) Reset() {
	*x = GetStationConfigVersionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStationConfigVersionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStationConfigVersionResp) ProtoMessage() {}

func (x *GetStationConfigVersionResp) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStationConfigVersionResp.ProtoReflect.Descriptor instead.
func (*GetStationConfigVersionResp) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{18}
}

func (x *GetStationConfigVersionResp) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetStationConfigVersionResp) GetWhitelistVersion() uint64 {
	if x != nil {
		return x.WhitelistVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetBlacklistVersion() uint64 {
	if x != nil {
		return x.BlacklistVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetAddBlacklistVersion() uint64 {
	if x != nil {
		return x.AddBlacklistVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetDelBlacklistVersion() uint64 {
	if x != nil {
		return x.DelBlacklistVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetAtgCfgTabVersion() uint64 {
	if x != nil {
		return x.AtgCfgTabVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetPpuCfgTabVersion() uint64 {
	if x != nil {
		return x.PpuCfgTabVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetStaNozTabVersion() uint64 {
	if x != nil {
		return x.StaNozTabVersion
	}
	return 0
}

func (x *GetStationConfigVersionResp) GetNoz_En_CFGVersion() uint64 {
	if x != nil {
		return x.Noz_En_CFGVersion
	}
	return 0
}

//获取服务器时间
type GetServerTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"` //box序列号
}

func (x *GetServerTimeReq) Reset() {
	*x = GetServerTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerTimeReq) ProtoMessage() {}

func (x *GetServerTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerTimeReq.ProtoReflect.Descriptor instead.
func (*GetServerTimeReq) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{19}
}

func (x *GetServerTimeReq) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

//服务器时间
type GetServerTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId   string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`        //box序列号
	SrvTime uint64 `protobuf:"varint,2,opt,name=srv_time,json=srvTime,proto3" json:"srv_time,omitempty"` //服务器时间
}

func (x *GetServerTimeResp) Reset() {
	*x = GetServerTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServerTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerTimeResp) ProtoMessage() {}

func (x *GetServerTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerTimeResp.ProtoReflect.Descriptor instead.
func (*GetServerTimeResp) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{20}
}

func (x *GetServerTimeResp) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetServerTimeResp) GetSrvTime() uint64 {
	if x != nil {
		return x.SrvTime
	}
	return 0
}

//查询油枪状态请求
type GetNozzleStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	CommTerminalId uint32 `protobuf:"varint,2,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,3,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,4,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,5,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
}

func (x *GetNozzleStatusReq) Reset() {
	*x = GetNozzleStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNozzleStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNozzleStatusReq) ProtoMessage() {}

func (x *GetNozzleStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNozzleStatusReq.ProtoReflect.Descriptor instead.
func (*GetNozzleStatusReq) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{21}
}

func (x *GetNozzleStatusReq) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetNozzleStatusReq) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *GetNozzleStatusReq) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *GetNozzleStatusReq) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *GetNozzleStatusReq) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

//查询油枪状态响应
type GetNozzleStatusResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId          string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                               //box序列号
	Datetime       uint64 `protobuf:"varint,2,opt,name=datetime,proto3" json:"datetime,omitempty"`                                     //统计信息时间
	CommTerminalId uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"` //通讯终端编号
	SideInTerminal uint32 `protobuf:"varint,4,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"` //通讯终端内面号
	ItemInSide     uint32 `protobuf:"varint,5,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`             //通讯终端面内顺序号
	NozzleCode     uint32 `protobuf:"varint,6,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`               //枪号
	NozzleStauts   uint32 `protobuf:"varint,7,opt,name=nozzle_stauts,json=nozzleStauts,proto3" json:"nozzle_stauts,omitempty"`         //油枪状态 1/2/3/4 空闲/油卡插入/加油中/离线
}

func (x *GetNozzleStatusResp) Reset() {
	*x = GetNozzleStatusResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNozzleStatusResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNozzleStatusResp) ProtoMessage() {}

func (x *GetNozzleStatusResp) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNozzleStatusResp.ProtoReflect.Descriptor instead.
func (*GetNozzleStatusResp) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{22}
}

func (x *GetNozzleStatusResp) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetNozzleStatusResp) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *GetNozzleStatusResp) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *GetNozzleStatusResp) GetSideInTerminal() uint32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *GetNozzleStatusResp) GetItemInSide() uint32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *GetNozzleStatusResp) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

func (x *GetNozzleStatusResp) GetNozzleStauts() uint32 {
	if x != nil {
		return x.NozzleStauts
	}
	return 0
}

//获取单笔交易请求
type GetTransactionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId                 string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                                                      //box序列号
	CommTerminalId        int64  `protobuf:"varint,2,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"`                        //通讯终端编号
	CommTerminalTxCounter int64  `protobuf:"varint,3,opt,name=comm_terminal_tx_counter,json=commTerminalTxCounter,proto3" json:"comm_terminal_tx_counter,omitempty"` //通讯终端交易编号
	BoxTxCounter          int64  `protobuf:"varint,4,opt,name=box_tx_counter,json=boxTxCounter,proto3" json:"box_tx_counter,omitempty"`                              //box交易编号
}

func (x *GetTransactionReq) Reset() {
	*x = GetTransactionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionReq) ProtoMessage() {}

func (x *GetTransactionReq) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionReq.ProtoReflect.Descriptor instead.
func (*GetTransactionReq) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{23}
}

func (x *GetTransactionReq) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetTransactionReq) GetCommTerminalId() int64 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *GetTransactionReq) GetCommTerminalTxCounter() int64 {
	if x != nil {
		return x.CommTerminalTxCounter
	}
	return 0
}

func (x *GetTransactionReq) GetBoxTxCounter() int64 {
	if x != nil {
		return x.BoxTxCounter
	}
	return 0
}

//获取单笔交易响应
type GetTransactionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MdcId                 string `protobuf:"bytes,1,opt,name=mdc_id,json=mdcId,proto3" json:"mdc_id,omitempty"`                                                       //box序列号
	BoxTxCounter          uint32 `protobuf:"varint,2,opt,name=box_tx_counter,json=boxTxCounter,proto3" json:"box_tx_counter,omitempty"`                               //box交易编号
	CommTerminalId        uint32 `protobuf:"varint,3,opt,name=comm_terminal_id,json=commTerminalId,proto3" json:"comm_terminal_id,omitempty"`                         //通讯终端编号
	CommTerminalTxCounter uint32 `protobuf:"varint,4,opt,name=comm_terminal_tx_counter,json=commTerminalTxCounter,proto3" json:"comm_terminal_tx_counter,omitempty"`  //通讯终端交易编号
	SideInTerminal        int32  `protobuf:"varint,5,opt,name=side_in_terminal,json=sideInTerminal,proto3" json:"side_in_terminal,omitempty"`                         //通讯终端内面号
	ItemInSide            int32  `protobuf:"varint,6,opt,name=item_in_side,json=itemInSide,proto3" json:"item_in_side,omitempty"`                                     //通讯终端面内顺序号
	TxType                TxType `protobuf:"varint,7,opt,name=tx_type,json=txType,proto3,enum=OilMachine.TxType" json:"tx_type,omitempty"`                            //交易类型
	Datetime              uint64 `protobuf:"varint,8,opt,name=datetime,proto3" json:"datetime,omitempty"`                                                             //时间戳,EPOCH秒数
	Asn                   string `protobuf:"bytes,9,opt,name=asn,proto3" json:"asn,omitempty"`                                                                        //卡应用号
	Balance               uint32 `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`                                                              //余额
	Amount                uint32 `protobuf:"varint,11,opt,name=amount,proto3" json:"amount,omitempty"`                                                                //数额
	CardTxCounter         uint32 `protobuf:"varint,12,opt,name=card_tx_counter,json=cardTxCounter,proto3" json:"card_tx_counter,omitempty"`                           //卡交易号
	Tac                   uint32 `protobuf:"varint,13,opt,name=tac,proto3" json:"tac,omitempty"`                                                                      //电子签名
	Gmac                  uint32 `protobuf:"varint,14,opt,name=gmac,proto3" json:"gmac,omitempty"`                                                                    //解灰认证码
	PsamTac               uint32 `protobuf:"varint,15,opt,name=psam_tac,json=psamTac,proto3" json:"psam_tac,omitempty"`                                               //灰锁签名
	PsamAsn               string `protobuf:"bytes,16,opt,name=psam_asn,json=psamAsn,proto3" json:"psam_asn,omitempty"`                                                //PSAM应用号
	PsamTerminalId        string `protobuf:"bytes,17,opt,name=psam_terminal_id,json=psamTerminalId,proto3" json:"psam_terminal_id,omitempty"`                         //PSAM编号
	PsamTerminalTxCounter uint32 `protobuf:"varint,18,opt,name=psam_terminal_tx_counter,json=psamTerminalTxCounter,proto3" json:"psam_terminal_tx_counter,omitempty"` //PSAM终端交易计数器
	DebitSource           uint32 `protobuf:"varint,19,opt,name=debit_source,json=debitSource,proto3" json:"debit_source,omitempty"`                                   //扣款来源
	Unit                  uint32 `protobuf:"varint,20,opt,name=unit,proto3" json:"unit,omitempty"`                                                                    //结算单位+方式
	CardType              uint32 `protobuf:"varint,21,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`                                            //卡类型
	CardKeyVerItem        uint32 `protobuf:"varint,22,opt,name=card_key_ver_item,json=cardKeyVerItem,proto3" json:"card_key_ver_item,omitempty"`                      //卡密钥索引+版本
	NozzleCode            uint32 `protobuf:"varint,23,opt,name=nozzle_code,json=nozzleCode,proto3" json:"nozzle_code,omitempty"`                                      //枪号
	GradeCode             string `protobuf:"bytes,24,opt,name=grade_code,json=gradeCode,proto3" json:"grade_code,omitempty"`                                          //油品代码
	Volume                uint32 `protobuf:"varint,25,opt,name=volume,proto3" json:"volume,omitempty"`                                                                //升数，单位0.01
	Price                 uint32 `protobuf:"varint,26,opt,name=price,proto3" json:"price,omitempty"`                                                                  //成交价格.非卡小数点后两位.其余按unit规定
	EmployeeId            uint32 `protobuf:"varint,27,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`                                      //员工号
	VolumeTotal           uint32 `protobuf:"varint,28,opt,name=volume_total,json=volumeTotal,proto3" json:"volume_total,omitempty"`                                   //累计升数,单位0.01
	TerminalMac           uint32 `protobuf:"varint,29,opt,name=terminal_mac,json=terminalMac,proto3" json:"terminal_mac,omitempty"`                                   //终端数据认证码
	RecvTime              uint64 `protobuf:"varint,30,opt,name=recv_time,json=recvTime,proto3" json:"recv_time,omitempty"`                                            //box接收时间
	GetMode               uint32 `protobuf:"varint,31,opt,name=get_mode,json=getMode,proto3" json:"get_mode,omitempty"`                                               //获取方式
}

func (x *GetTransactionResp) Reset() {
	*x = GetTransactionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_transferMessage_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResp) ProtoMessage() {}

func (x *GetTransactionResp) ProtoReflect() protoreflect.Message {
	mi := &file_transferMessage_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResp.ProtoReflect.Descriptor instead.
func (*GetTransactionResp) Descriptor() ([]byte, []int) {
	return file_transferMessage_proto_rawDescGZIP(), []int{24}
}

func (x *GetTransactionResp) GetMdcId() string {
	if x != nil {
		return x.MdcId
	}
	return ""
}

func (x *GetTransactionResp) GetBoxTxCounter() uint32 {
	if x != nil {
		return x.BoxTxCounter
	}
	return 0
}

func (x *GetTransactionResp) GetCommTerminalId() uint32 {
	if x != nil {
		return x.CommTerminalId
	}
	return 0
}

func (x *GetTransactionResp) GetCommTerminalTxCounter() uint32 {
	if x != nil {
		return x.CommTerminalTxCounter
	}
	return 0
}

func (x *GetTransactionResp) GetSideInTerminal() int32 {
	if x != nil {
		return x.SideInTerminal
	}
	return 0
}

func (x *GetTransactionResp) GetItemInSide() int32 {
	if x != nil {
		return x.ItemInSide
	}
	return 0
}

func (x *GetTransactionResp) GetTxType() TxType {
	if x != nil {
		return x.TxType
	}
	return TxType_CardNormal
}

func (x *GetTransactionResp) GetDatetime() uint64 {
	if x != nil {
		return x.Datetime
	}
	return 0
}

func (x *GetTransactionResp) GetAsn() string {
	if x != nil {
		return x.Asn
	}
	return ""
}

func (x *GetTransactionResp) GetBalance() uint32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetTransactionResp) GetAmount() uint32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetTransactionResp) GetCardTxCounter() uint32 {
	if x != nil {
		return x.CardTxCounter
	}
	return 0
}

func (x *GetTransactionResp) GetTac() uint32 {
	if x != nil {
		return x.Tac
	}
	return 0
}

func (x *GetTransactionResp) GetGmac() uint32 {
	if x != nil {
		return x.Gmac
	}
	return 0
}

func (x *GetTransactionResp) GetPsamTac() uint32 {
	if x != nil {
		return x.PsamTac
	}
	return 0
}

func (x *GetTransactionResp) GetPsamAsn() string {
	if x != nil {
		return x.PsamAsn
	}
	return ""
}

func (x *GetTransactionResp) GetPsamTerminalId() string {
	if x != nil {
		return x.PsamTerminalId
	}
	return ""
}

func (x *GetTransactionResp) GetPsamTerminalTxCounter() uint32 {
	if x != nil {
		return x.PsamTerminalTxCounter
	}
	return 0
}

func (x *GetTransactionResp) GetDebitSource() uint32 {
	if x != nil {
		return x.DebitSource
	}
	return 0
}

func (x *GetTransactionResp) GetUnit() uint32 {
	if x != nil {
		return x.Unit
	}
	return 0
}

func (x *GetTransactionResp) GetCardType() uint32 {
	if x != nil {
		return x.CardType
	}
	return 0
}

func (x *GetTransactionResp) GetCardKeyVerItem() uint32 {
	if x != nil {
		return x.CardKeyVerItem
	}
	return 0
}

func (x *GetTransactionResp) GetNozzleCode() uint32 {
	if x != nil {
		return x.NozzleCode
	}
	return 0
}

func (x *GetTransactionResp) GetGradeCode() string {
	if x != nil {
		return x.GradeCode
	}
	return ""
}

func (x *GetTransactionResp) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *GetTransactionResp) GetPrice() uint32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetTransactionResp) GetEmployeeId() uint32 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *GetTransactionResp) GetVolumeTotal() uint32 {
	if x != nil {
		return x.VolumeTotal
	}
	return 0
}

func (x *GetTransactionResp) GetTerminalMac() uint32 {
	if x != nil {
		return x.TerminalMac
	}
	return 0
}

func (x *GetTransactionResp) GetRecvTime() uint64 {
	if x != nil {
		return x.RecvTime
	}
	return 0
}

func (x *GetTransactionResp) GetGetMode() uint32 {
	if x != nil {
		return x.GetMode
	}
	return 0
}

var File_transferMessage_proto protoreflect.FileDescriptor

var file_transferMessage_proto_rawDesc = []byte{
	0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x22, 0x45, 0x0a, 0x11, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x54, 0x61, 0x6e, 0x6b, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x13, 0x4e, 0x6f,
	0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4e,
	0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xf9, 0x07, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x6d, 0x64, 0x63, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x64, 0x63, 0x54, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x54,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6d,
	0x61, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6d, 0x61, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x73, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x73, 0x61, 0x6d, 0x54, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x73, 0x61,
	0x6d, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x73, 0x61,
	0x6d, 0x41, 0x73, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x73, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x73, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x70, 0x73, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x70, 0x73, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a,
	0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x0a, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6c, 0x6c, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6c, 0x6c, 0x61, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x22, 0xde, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x75, 0x65, 0x6c,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x64, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69,
	0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a,
	0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53, 0x69, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x73, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xde,
	0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xdd, 0x01, 0x0a, 0x11, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69,
	0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xd8, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x70, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a,
	0x7a, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x4e, 0x6f,
	0x7a, 0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x18, 0x4e,
	0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x4c, 0x0a, 0x10, 0x41, 0x74, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x4b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x74, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x01, 0x0a,
	0x05, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xfe, 0x01, 0x0a, 0x0b, 0x41, 0x74, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d,
	0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x62, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xc1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x74, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x74, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x61, 0x74, 0x67,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a,
	0x12, 0x61, 0x74, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4f, 0x69, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x41, 0x74, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x52, 0x10, 0x61, 0x74, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x33, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x22, 0xb0, 0x03, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x77, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64,
	0x64, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x61, 0x64, 0x64, 0x42, 0x6c,
	0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x6c, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x64,
	0x65, 0x6c, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x74, 0x67, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x74, 0x61,
	0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x61, 0x74, 0x67, 0x43, 0x66, 0x67, 0x54, 0x61, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x70, 0x75, 0x5f, 0x63, 0x66, 0x67, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10,
	0x70, 0x70, 0x75, 0x43, 0x66, 0x67, 0x54, 0x61, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x7a, 0x5f, 0x74, 0x61, 0x62, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x4e, 0x6f, 0x7a, 0x54, 0x61, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x12, 0x6e, 0x6f, 0x7a, 0x5f, 0x45, 0x6e, 0x5f, 0x43, 0x46, 0x47, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x6f, 0x7a,
	0x45, 0x6e, 0x43, 0x46, 0x47, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64,
	0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x72, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x72, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc2,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53, 0x69,
	0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x53, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6e, 0x6f,
	0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x75, 0x74, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6f,
	0x78, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x62, 0x6f, 0x78, 0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x22, 0x80, 0x08, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x64, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x64, 0x63, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x6f, 0x78, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6f, 0x78, 0x54, 0x78, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x64, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x73, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x54,
	0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6d,
	0x61, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x67, 0x6d, 0x61, 0x63, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x73, 0x61, 0x6d, 0x5f, 0x74, 0x61, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x70, 0x73, 0x61, 0x6d, 0x54, 0x61, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x73, 0x61,
	0x6d, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x73, 0x61,
	0x6d, 0x41, 0x73, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x73, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x73, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x70, 0x73, 0x61, 0x6d, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x74, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x15, 0x70, 0x73, 0x61, 0x6d, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x78,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x64,
	0x65, 0x62, 0x69, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x11, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x6f, 0x7a,
	0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x63, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x2a, 0xc8, 0x01, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x44, 0x65, 0x62, 0x69, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x64, 0x47, 0x72,
	0x65, 0x79, 0x44, 0x65, 0x62, 0x69, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x72,
	0x64, 0x47, 0x72, 0x65, 0x79, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4f, 0x6e, 0x44,
	0x75, 0x74, 0x79, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x4f, 0x66, 0x66, 0x44, 0x75, 0x74, 0x79, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x6f, 0x43, 0x61, 0x72, 0x64, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x66, 0x75, 0x73, 0x65, 0x64, 0x10, 0x09, 0x32, 0x53,
	0x0a, 0x07, 0x4f, 0x69, 0x6c, 0x54, 0x61, 0x6e, 0x6b, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x4f, 0x69, 0x6c,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x16, 0x2e, 0x4f, 0x69, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x32, 0xf3, 0x01, 0x0a, 0x09, 0x4f, 0x69, 0x6c, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c,
	0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x17, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2e, 0x41, 0x74, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1f, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x11, 0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x54, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x2e,
	0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x4e, 0x6f, 0x7a, 0x7a, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x17,
	0x2e, 0x4f, 0x69, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_transferMessage_proto_rawDescOnce sync.Once
	file_transferMessage_proto_rawDescData = file_transferMessage_proto_rawDesc
)

func file_transferMessage_proto_rawDescGZIP() []byte {
	file_transferMessage_proto_rawDescOnce.Do(func() {
		file_transferMessage_proto_rawDescData = protoimpl.X.CompressGZIP(file_transferMessage_proto_rawDescData)
	})
	return file_transferMessage_proto_rawDescData
}

var file_transferMessage_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_transferMessage_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_transferMessage_proto_goTypes = []interface{}{
	(TxType)(0),                         // 0: OilMachine.TxType
	(*TankRequestParams)(nil),           // 1: OilMachine.TankRequestParams
	(*NozzleRequestParams)(nil),         // 2: OilMachine.NozzleRequestParams
	(*Transaction)(nil),                 // 3: OilMachine.Transaction
	(*TankStatus)(nil),                  // 4: OilMachine.TankStatus
	(*RefuelStartedEvent)(nil),          // 5: OilMachine.RefuelStartedEvent
	(*RefuelFinishedEvent)(nil),         // 6: OilMachine.RefuelFinishedEvent
	(*CardInsertedEvent)(nil),           // 7: OilMachine.CardInsertedEvent
	(*NozzleOfflineEvent)(nil),          // 8: OilMachine.NozzleOfflineEvent
	(*NozzleOnlineEvent)(nil),           // 9: OilMachine.NozzleOnlineEvent
	(*CardPopEvent)(nil),                // 10: OilMachine.CardPopEvent
	(*NozzleConfigUpdated)(nil),         // 11: OilMachine.NozzleConfigUpdated
	(*NozzlePriceConfigUpdated)(nil),    // 12: OilMachine.NozzlePriceConfigUpdated
	(*AtgConfigUpdated)(nil),            // 13: OilMachine.AtgConfigUpdated
	(*GetAtgConfigReq)(nil),             // 14: OilMachine.GetAtgConfigReq
	(*Probe)(nil),                       // 15: OilMachine.Probe
	(*AtgTerminal)(nil),                 // 16: OilMachine.AtgTerminal
	(*GetAtgConfigResp)(nil),            // 17: OilMachine.GetAtgConfigResp
	(*GetStationConfigVersionReq)(nil),  // 18: OilMachine.GetStationConfigVersionReq
	(*GetStationConfigVersionResp)(nil), // 19: OilMachine.GetStationConfigVersionResp
	(*GetServerTimeReq)(nil),            // 20: OilMachine.GetServerTimeReq
	(*GetServerTimeResp)(nil),           // 21: OilMachine.GetServerTimeResp
	(*GetNozzleStatusReq)(nil),          // 22: OilMachine.GetNozzleStatusReq
	(*GetNozzleStatusResp)(nil),         // 23: OilMachine.GetNozzleStatusResp
	(*GetTransactionReq)(nil),           // 24: OilMachine.GetTransactionReq
	(*GetTransactionResp)(nil),          // 25: OilMachine.GetTransactionResp
}
var file_transferMessage_proto_depIdxs = []int32{
	0,  // 0: OilMachine.Transaction.tx_type:type_name -> OilMachine.TxType
	15, // 1: OilMachine.AtgTerminal.probe_items:type_name -> OilMachine.Probe
	16, // 2: OilMachine.GetAtgConfigResp.atg_terminal_items:type_name -> OilMachine.AtgTerminal
	0,  // 3: OilMachine.GetTransactionResp.tx_type:type_name -> OilMachine.TxType
	1,  // 4: OilMachine.OilTank.GetTankStatus:input_type -> OilMachine.TankRequestParams
	2,  // 5: OilMachine.OilNozzle.GetNozzleStatus:input_type -> OilMachine.NozzleRequestParams
	2,  // 6: OilMachine.OilNozzle.GetNozzleConfig:input_type -> OilMachine.NozzleRequestParams
	2,  // 7: OilMachine.OilNozzle.GetTxCountStatus:input_type -> OilMachine.NozzleRequestParams
	4,  // 8: OilMachine.OilTank.GetTankStatus:output_type -> OilMachine.TankStatus
	16, // 9: OilMachine.OilNozzle.GetNozzleStatus:output_type -> OilMachine.AtgTerminal
	15, // 10: OilMachine.OilNozzle.GetNozzleConfig:output_type -> OilMachine.Probe
	3,  // 11: OilMachine.OilNozzle.GetTxCountStatus:output_type -> OilMachine.Transaction
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_transferMessage_proto_init() }
func file_transferMessage_proto_init() {
	if File_transferMessage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_transferMessage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TankRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NozzleRequestParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TankStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefuelStartedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefuelFinishedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardInsertedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NozzleOfflineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NozzleOnlineEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardPopEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NozzleConfigUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NozzlePriceConfigUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtgConfigUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAtgConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Probe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AtgTerminal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAtgConfigResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStationConfigVersionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStationConfigVersionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServerTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNozzleStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNozzleStatusResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_transferMessage_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_transferMessage_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_transferMessage_proto_goTypes,
		DependencyIndexes: file_transferMessage_proto_depIdxs,
		EnumInfos:         file_transferMessage_proto_enumTypes,
		MessageInfos:      file_transferMessage_proto_msgTypes,
	}.Build()
	File_transferMessage_proto = out.File
	file_transferMessage_proto_rawDesc = nil
	file_transferMessage_proto_goTypes = nil
	file_transferMessage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OilTankClient is the client API for OilTank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OilTankClient interface {
	//获取指定门店的油罐信息
	GetTankStatus(ctx context.Context, in *TankRequestParams, opts ...grpc.CallOption) (*TankStatus, error)
}

type oilTankClient struct {
	cc grpc.ClientConnInterface
}

func NewOilTankClient(cc grpc.ClientConnInterface) OilTankClient {
	return &oilTankClient{cc}
}

func (c *oilTankClient) GetTankStatus(ctx context.Context, in *TankRequestParams, opts ...grpc.CallOption) (*TankStatus, error) {
	out := new(TankStatus)
	err := c.cc.Invoke(ctx, "/OilMachine.OilTank/GetTankStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OilTankServer is the server API for OilTank service.
type OilTankServer interface {
	//获取指定门店的油罐信息
	GetTankStatus(context.Context, *TankRequestParams) (*TankStatus, error)
}

// UnimplementedOilTankServer can be embedded to have forward compatible implementations.
type UnimplementedOilTankServer struct {
}

func (*UnimplementedOilTankServer) GetTankStatus(context.Context, *TankRequestParams) (*TankStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTankStatus not implemented")
}

func RegisterOilTankServer(s *grpc.Server, srv OilTankServer) {
	s.RegisterService(&_OilTank_serviceDesc, srv)
}

func _OilTank_GetTankStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TankRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OilTankServer).GetTankStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OilMachine.OilTank/GetTankStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OilTankServer).GetTankStatus(ctx, req.(*TankRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _OilTank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OilMachine.OilTank",
	HandlerType: (*OilTankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTankStatus",
			Handler:    _OilTank_GetTankStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transferMessage.proto",
}

// OilNozzleClient is the client API for OilNozzle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OilNozzleClient interface {
	//获取油枪状态
	GetNozzleStatus(ctx context.Context, in *NozzleRequestParams, opts ...grpc.CallOption) (*AtgTerminal, error)
	//获取油枪配置信息
	GetNozzleConfig(ctx context.Context, in *NozzleRequestParams, opts ...grpc.CallOption) (*Probe, error)
	//获取油枪相关交易
	GetTxCountStatus(ctx context.Context, in *NozzleRequestParams, opts ...grpc.CallOption) (*Transaction, error)
}

type oilNozzleClient struct {
	cc grpc.ClientConnInterface
}

func NewOilNozzleClient(cc grpc.ClientConnInterface) OilNozzleClient {
	return &oilNozzleClient{cc}
}

func (c *oilNozzleClient) GetNozzleStatus(ctx context.Context, in *NozzleRequestParams, opts ...grpc.CallOption) (*AtgTerminal, error) {
	out := new(AtgTerminal)
	err := c.cc.Invoke(ctx, "/OilMachine.OilNozzle/GetNozzleStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oilNozzleClient) GetNozzleConfig(ctx context.Context, in *NozzleRequestParams, opts ...grpc.CallOption) (*Probe, error) {
	out := new(Probe)
	err := c.cc.Invoke(ctx, "/OilMachine.OilNozzle/GetNozzleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oilNozzleClient) GetTxCountStatus(ctx context.Context, in *NozzleRequestParams, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/OilMachine.OilNozzle/GetTxCountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OilNozzleServer is the server API for OilNozzle service.
type OilNozzleServer interface {
	//获取油枪状态
	GetNozzleStatus(context.Context, *NozzleRequestParams) (*AtgTerminal, error)
	//获取油枪配置信息
	GetNozzleConfig(context.Context, *NozzleRequestParams) (*Probe, error)
	//获取油枪相关交易
	GetTxCountStatus(context.Context, *NozzleRequestParams) (*Transaction, error)
}

// UnimplementedOilNozzleServer can be embedded to have forward compatible implementations.
type UnimplementedOilNozzleServer struct {
}

func (*UnimplementedOilNozzleServer) GetNozzleStatus(context.Context, *NozzleRequestParams) (*AtgTerminal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNozzleStatus not implemented")
}
func (*UnimplementedOilNozzleServer) GetNozzleConfig(context.Context, *NozzleRequestParams) (*Probe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNozzleConfig not implemented")
}
func (*UnimplementedOilNozzleServer) GetTxCountStatus(context.Context, *NozzleRequestParams) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxCountStatus not implemented")
}

func RegisterOilNozzleServer(s *grpc.Server, srv OilNozzleServer) {
	s.RegisterService(&_OilNozzle_serviceDesc, srv)
}

func _OilNozzle_GetNozzleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NozzleRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OilNozzleServer).GetNozzleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OilMachine.OilNozzle/GetNozzleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OilNozzleServer).GetNozzleStatus(ctx, req.(*NozzleRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OilNozzle_GetNozzleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NozzleRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OilNozzleServer).GetNozzleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OilMachine.OilNozzle/GetNozzleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OilNozzleServer).GetNozzleConfig(ctx, req.(*NozzleRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _OilNozzle_GetTxCountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NozzleRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OilNozzleServer).GetTxCountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OilMachine.OilNozzle/GetTxCountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OilNozzleServer).GetTxCountStatus(ctx, req.(*NozzleRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _OilNozzle_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OilMachine.OilNozzle",
	HandlerType: (*OilNozzleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNozzleStatus",
			Handler:    _OilNozzle_GetNozzleStatus_Handler,
		},
		{
			MethodName: "GetNozzleConfig",
			Handler:    _OilNozzle_GetNozzleConfig_Handler,
		},
		{
			MethodName: "GetTxCountStatus",
			Handler:    _OilNozzle_GetTxCountStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transferMessage.proto",
}
